/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Application
    matricoFoam

Description
    Transient solver for incompressible, laminar flow of Newtonian fluids.

\*---------------------------------------------------------------------------*/

#include "fvCFD.H"
#include "FieldField.H"
#include "OFstream.H"

#include "complex.H"
// #include "simpleMatrix.H"
// #include <armadillo>

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

int main(int argc, char *argv[])
{
    #include "setRootCase.H"
    
    #include "createTime.H"
    #include "createMesh.H"
    #include "createFields.H"
    #include "initContinuityErrs.H"
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
    
   
    Info<< "\nStarting time loop\n" << endl;

//     while (runTime.loop())
//     {
        Info<< "Time = " << runTime.timeName() << nl << endl;

        #include "readPISOControls.H"
        #include "CourantNo.H"

        fvVectorMatrix UEqn
        (
            fvm::ddt(U)
          + fvm::div(phi, U)
          - fvm::laplacian(nu, U)
        );

        solve(UEqn == -fvc::grad(p));

        // --- PISO loop
	
	
        for (int corr=0; corr<nCorr; corr++)
        {
            volScalarField rAU(1.0/UEqn.A());

            U = rAU*UEqn.H();
            phi = (fvc::interpolate(U) & mesh.Sf())
                + fvc::ddtPhiCorr(rAU, U, phi);

            adjustPhi(phi, U, p);

            for (int nonOrth=0; nonOrth<=nNonOrthCorr; nonOrth++)
            {
                fvScalarMatrix pEqn
                (
                    fvm::laplacian(rAU, p) == fvc::div(phi)
                );

                pEqn.setReference(pRefCell, pRefValue);
                
//                 pEqn.solve();
//-----------------------------------------------------------------               
               List<List<scalar> > A;					// init 2-dimensional list A
               List<scalar> b;						// init list b
                double upSum = 0;
		double downSum = 0;
		double F = 0;
		
                A.resize(p.size());					// A and p have equal size
                b.resize(p.size());
                forAll(A, i)
                {
            	    A[i].resize(p.size());				// every element of A is array
            	    forAll(A[i],j)					// clearing A and b
            	    {
            		A[i][j] = 0.0;
            	    }
            	    b[i] = 0.0;
                }
                
//                 arma::mat Ar = arma::zeros<arma::mat>(p.size(),p.size());
// 		arma::mat br = arma::zeros<arma::mat>(1,p.size());
		
                forAll(p,i)//for (int i = 0; i<=p.size(); i++) //forAll(A,i)
                {
            	    A[i][i] = pEqn.diag()[i];				// inserting diagonal elements in A
//             	    Ar(i,i) = pEqn.diag()[i];
            	    b[i]    = pEqn.source()[i];				// and in b
//                     br(i) = pEqn.source()[i];
// 		    Info<< "abs(pEqn.diag()[i]) = " << abs(pEqn.diag()[i]) << nl << endl;
// 		    forAll(p,j)
// 		    {
// 		      if(pEqn.diag()[i]>0 && pEqn.diag()[j]>0)
// 			upSum += pEqn.upper()[i] / sqrt(float(pEqn.diag()[i]))*sqrt(float(pEqn.diag()[j]));
// 		    }
// 		    downSum += pEqn.diag()[i]*pEqn.diag()[i];
		}
                
                const lduAddressing& addr = pEqn.lduAddr();
                const labelList& lowerAddr = addr.lowerAddr();
                const labelList& upperAddr = addr.upperAddr();                
                
                forAll(lowerAddr, i)
                {
            	    A[lowerAddr[i]][upperAddr[i]] = pEqn.upper()[i];
// 		    Ar(lowerAddr[i],upperAddr[i]) = pEqn.upper()[i];

            	    A[upperAddr[i]][lowerAddr[i]] = pEqn.lower()[i];
// 		    Ar(upperAddr[i],lowerAddr[i]) = pEqn.lower()[i];
// 		    downSum += pEqn.upper()[i]*pEqn.upper()[i];
// 		    downSum += pEqn.lower()[i]*pEqn.lower()[i];
                }
                
                forAll(p.boundaryField(),I)
                {
            	    const fvPatch &ptch=p.boundaryField()[I].patch();
            	    forAll(ptch,J)
            	    {
            		int w=ptch.faceCells()[J];
            		A[w][w]+=pEqn.internalCoeffs()[I][J];
// 			Ar(w,w)+=pEqn.internalCoeffs()[I][J];
            		b[w]   +=pEqn.boundaryCoeffs()[I][J];
// 			br(w) +=pEqn.boundaryCoeffs()[I][J];
            	    }
                
                }
                
//                 arma::mat D = arma::zeros<arma::mat>(Ar.n_rows,Ar.n_cols); // = pow(Ar%Eye,-0.5); //CHIT!!
// 		arma::mat Asqr = pow(abs(Ar),0.5); // CHIT!
// 		for (int i=0; i<p.size(); i++) // forAll(A,i)
//                 {
// 		  for (int j=0; j<p.size(); j++)
// 		  {
// 		    if (i==j)
// 		    {
// 		      if (Asqr(i,j)==0)
// 		      {
// 			Info << "Asqr(i,j)==0 !!!" << nl << endl;
// 		      }
// 		      else
// 		      {
// 			D(i,j)= 1/Asqr(i,j);
// 		      }
// 		    }
// 		  }
// 		}
// 		
// 		arma::mat Arrr = D*Ar*D;
// 		
// 		upSum = 0;
// 		for (int i=0; i<p.size(); i++) // forAll(A,i)
//                 {
// 		  for (int j=0; j<p.size(); j++)
// 		  {
// 		    if (i==j)
// 		    {
// 		      upSum += Arrr(i,j);
// 		      Info << "Arr("<< i << "," << j << ")" << Arrr(i,j) << endl;
// 		      Info << "D("<< i << "," << j << ")" << D(i,j) << endl;
// 		    }
// 		    else
// 		    {
// 		      if (Arrr(i,j)>0 || Arrr(i,j)<0)
// 		      {
// 			downSum += Arrr(i,j);
// 		        Info << "downSum = " << downSum << nl << endl;
// 		      }
// 		    }
// 		  }
// 		}
		
		Info << "=== A(i,j) ===" << nl << endl;
		for (int i=0; i<psi.size(); i++) // forAll(A,i)
                {
		  for (int j=0; j<psi.size(); j++)
		  {
// 		    Info << A(i,j) << " ";
		    Info << A[i][j] << " ";
		  }
		  Info << nl << endl;
		  
		}
		
		
		Info << "=== b(i,j) ===" << nl << endl;
		for (int i=0; i<psi.size(); i++) // forAll(A,i)
                {
// 		  for (int j=0; j<psi.size(); j++)
// 		  {
// 		    Info << b(i,0) << " ";
		    Info << b[i] << " ";
// 		  }
		  Info << nl << endl;
		  
		}
//                 scalar x = arma::det(Ar);
// 		Info << "det(Ar)" <<nl<<x<<nl<<endl;
// 		arma::Col<std::complex<double> > eig = arma::eig_gen(Ar);
// 		scalar minEig = min(eig).real();
// 		scalar maxEig = max(eig).real();
// 		
// 		if (min(eig).imag()==0 && max(eig).imag()==0)
// 		  Info << "Imaginary parts of minEig and maxEig are zeros" << nl << endl;
// 		Info << "minEig" << nl<< minEig <<nl<<endl;
// 		Info << "maxEig" << nl<< maxEig <<nl<<endl;
// 		Info << "Cond^-1" << nl<< minEig/maxEig <<nl<<endl;
// 		F = upSum*upSum/downSum;
// 		Info << "upSum=" << upSum << nl << endl;
// 		Info << "downSum=" << downSum << nl << endl;
// 		Info << "F=" << F << nl << endl;
		
//Info << "A=" <<nl<<A<<nl<<endl;
//Info << "b=" <<nl<<b<<nl<<endl;
                
/*				OFstream fileA("mA.txt");
				fileA.precision(18);
				forAll(A,i)
				{
					if (i!=0)
					fileA << endl;
					forAll(A[i],j)
					{
						if (j!=0)
							fileA<<" ";
						fileA<<A[i][j];
					}

				}              
				//fileA.close();

				OFstream fileb("mb.txt");
				fileb.precision(18);
				forAll(b,i)
				{
					if (i!=0)
					fileb << " ";
					fileb << pEqn.source()[i];
					//					fileb << b[i]; 
				}*/              

		
//-----------------------------------------------------------------
                if (nonOrth == nNonOrthCorr)
                {
                    phi -= pEqn.flux();
                }
            }

            #include "continuityErrs.H"

            U -= rAU*fvc::grad(p);
            U.correctBoundaryConditions();
        }

        runTime.write();

        Info<< "ExecutionTime = " << runTime.elapsedCpuTime() << " s"
            << "  ClockTime = " << runTime.elapsedClockTime() << " s"
            << nl << endl;
//     }

    Info<< "End\n" << endl;

    return 0;
}


// ************************************************************************* //
